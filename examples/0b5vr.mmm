#stage(main)
let BPM = 130.0
let B2T = 60.0 / BPM

let E = 2.718281828459045
let PI = 3.141592653589793
let TAU = 2 * PI

fn exp(x) {
  E ^ x
}

fn counter(x) {
  self + x
}

fn integ(x, reset) {
  if (reset) {
    0
  } else {
    self + x
  }
}

fn lerp(a, b, t) {
  a * (1 - t) + b * t
}

fn clamp(x, a, b) {
  min(max(x, a), b)
}

fn saturate(x) {
  clamp(x, 0, 1)
}

fn linearstep(a, b, t) {
  saturate((t - a) / (b - a))
}

fn smoothstep(a, b, t) {
  let x = linearstep(a, b, t)
  x * x * (3 - 2 * x)
}

fn dsp() {
  let dest = 0.0
  let time = now / samplerate
  {
    let t = time % B2T
    let reset = t < 1 / samplerate

    let env = smoothstep(0.3, 0.1, t)
    env = env * exp(-100.0 * t) 
    let freq = 50
    freq = freq * lerp(1, 3, exp(-40 * t))

    let phase = integ(TAU * freq / samplerate, reset)
    if(reset){ 
        probeln(phase)
    }else{
        0
    }
    dest = dest + env * sin(phase)
  }

  dest = dest |> Probe!("test")

  (dest, dest)
}