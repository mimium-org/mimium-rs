//same as cascadeosc.mmm, but written with new multi-stage computation feature.
// include("osc.mmm")
`{
let PI = 3.14159265359

let phasor_shift =  |freq,phase_shift|{
    (self + freq/samplerate + phase_shift)%1.0
}

let sinwave = |freq,phase|{
    phasor_shift(freq,phase)*2.0*PI |> sin
}
let osc = |freq|{
  sinwave(freq,0.0)
}
${
    letrec cascade = |n,gen|{
        if (n>0.0){
            let c = cascade(n - 1.0 ,gen)
            let multiplier = 1.0-(1.0/(n*2.0)) |> lift_f
            `{|rate| rate + ($gen)(rate/2.0)* 0.5 * rate* $multiplier  |> $c }
        }else{
            `{|rate| ($gen)(rate)}
        }
    }
`{
let dsp = | | {
    let r =  200 |> $(cascade(20.0,`osc))
    (r,r)
}
}
}
}
