fn sec2samp(sec){
    sec*samplerate
}
fn countup(active){
    let r  =(self+1.0);
    let rr = if (active>0) r else 0.0
    rr
}
fn countupn(time,active){
    let res = countup(active)
    let r = if(res<time) res else 0.0
    r
}
fn hold(time,active){
    countupn(time,active)>0.0
}
fn adsr(attack,decay,sustain,release,input){
    let s = self;
    let at_or_dec = hold(sec2samp(attack),input)
    let atsig = min(1.0,(s + 1.0/sec2samp(attack)))
    let decsig = max(sustain,(s-1.0/sec2samp(decay)))
    let releasesig =max(0.0,(s-1.0/sec2samp(release)))
    let at_dec_sus_sig = if (at_or_dec>0.0) atsig else decsig
    let res = if (input>0.0) at_dec_sus_sig else releasesig
    res
}